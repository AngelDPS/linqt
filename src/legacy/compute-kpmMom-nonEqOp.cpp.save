
// Used for OPENMP functions
#include <omp.h>

// Parsing library
#include <libconfig.h++>

// C & C++ libraries
#include <iostream>		/* for std::cout mostly */
#include <string>		/* for std::string class */
#include <fstream>		/* for std::ofstream and std::ifstream functions classes*/
#include <vector>		/* for std::vector mostly class*/
#include <complex>		/* for std::vector mostly class*/

// MKL LIBRARIES
#define MKL_Complex16 std::complex<double>
#include "mathimf.h"
#include "mkl.h"
#include "mkl_spblas.h"
typedef std::complex<double> complex;
typedef MKL_INT integer;


//CUSTOM LIBRARIES
#include "kernel_functions.hpp"
#include "algebra_functions.hpp"


complex BesselC(const int n, const complex z,const double t )
{
	double dt = 0.00001;
	complex BesselC0=0.0,BesselC1=0.0,BesselC2=0.0;
	double t0=dt;

	while( t0 < t )
	{
		BesselC0+= dt* 0.5*exp(-z*t0)*( j0( t0 ) + exp(-z*dt)*j0( t0+dt ) );
		t0+=dt;
	}
	if( n== 0 )
		return BesselC0;	

	t0=dt;
	while( t0 < t )
	{
		BesselC1+= dt* 0.5*exp(-z*t0)*( j1( t0 ) + exp(-z*dt)*j1( t0+dt ) );
		t0+=dt;
	}
	if( n== 1 )
		return BesselC1;	

	int n0 = 2;
	while ( n0<= n)
	{ 	
		BesselC2 = -2.0*z*BesselC1+ BesselC0 - 2.0*exp(-z*t0)* jn(n0-1, t0 );
		if( n0 == n )
			return BesselC2;	

		BesselC0 = BesselC1;
		BesselC1 = BesselC2;
		n0++;
	}

	return BesselC2;	

};


int GetMomFromTol(const double tol, const double bandWidth, const double broadening )
{
	
	const int MAXMom = 100000;
	const double nb = 2.0*broadening/bandWidth/3.0;//The factor 3 is to take into account for 1/x to be at x= 3; 
	const double Xmin=-0.99,Xmax= -Xmin ;
	const int nx = (Xmax-Xmin)/(0.1*nb); 
	const double dX = (Xmax-Xmin ) / (nx-1);

	std::vector< complex > coeff(MAXMom,0);  
	std::vector< complex > aprox(nx,0);  
	
	for(int m = 0 ; m < MAXMom ; m++ )
	{
		coeff[m] = CPGF_Fun(m,0,nb );
		if( m == 0 ) coeff[0]*=0.5;
			
		double err = 0.0;
		for(  int n = 0 ; n < nx ; n++ )
		{
			const double x = Xmin + n*(Xmax-Xmin)/(nx-1);
			const complex exact = 1.0/complex(-x,nb);
			aprox[n] += coeff[m]*cos(m*acos(x) );
			err += sqrt( std::norm( ( aprox[n]-exact)/exact) ) ; 
		}
		err = err/nx;
		if ( err < tol )
			return m ;
	}
	return -1;
};





struct chebMom
{
	chebMom(const int m0,const int m1):numMom1(m1),numMom0(m0){};
	 
	complex& operator()(const int m0,const int m1)
	{
		return pmu[ m0*numMom1 + m1 ];
	}
	
	int numMom1,numMom0;
	complex* pmu;
};

int main(int argc, char *argv[])
{	
	
	libconfig::Config cfg;
	// Read the file. If there is an error, report it and exit.
	cfg.readFile(argv[1]);
	
	const
	std::string 
	LABEL = cfg.lookup("SystemName"),
	S_OPR = cfg.lookup("Operator"),
	S_OPL = "VX";


	double bandWidth, bandCenter, broadening;
	cfg.lookupValue("BandWidth",bandWidth);
	cfg.lookupValue("BandCenter",bandCenter);
	cfg.lookupValue("Broadening",broadening); broadening=broadening/1000.;
	const double nb = broadening*2.0/bandWidth;


	double Emin, Emax, dE;
	cfg.lookupValue("Emin",Emin);
	cfg.lookupValue("Emax",Emax);
	cfg.lookupValue("dE",dE); 

	int numMoms, numRV;
	cfg.lookupValue("NumberOfMoments",numMoms);
	cfg.lookupValue("NumberOfRandVec",numRV);
	std::stringstream ss;
	std::string sNumMom, snumRV;
	ss << numMoms; sNumMom = ss.str(); ss.str(std::string());
	ss << numRV; snumRV = ss.str();

	
//	numMoms =GetMomFromTol(0.1, bandWidth, broadening );// This computes the number of moments for getting a Green's function within 1% error. 
//	std::cout<<numMoms<<std::endl;
//	return 0;


	//READ NORMALIZED HAMILTONIAN
	CSRMatrix NHAM,OPL,OPR;
	NHAM.ReadCSRMatrix( "operators/"+LABEL+".HAM.CSR"); //Normalized Hamiltonian
	NHAM.Rescale( 2.0/bandWidth  );
	NHAM.Optimize(numMoms*numMoms*numRV); //OPTIMIZE MATRIX

	//READ OPERATOR LEFT
	OPL.ReadCSRMatrix( "operators/"+LABEL+"."+S_OPL+".CSR");
	OPL.Optimize(numMoms*numRV);

	OPR.ReadCSRMatrix( "operators/"+LABEL+"."+S_OPR+".CSR");
	OPR.Optimize(numRV);
	


	//INITIALIZE KPM PARAMETERS
	const int numMoms0=numMoms,numMoms1=numMoms; 
	chebMom mu(numMoms0,numMoms1); 
	const int dim = NHAM.Dim();
	complex* data = new complex[ 5*dim + numMoms0*numMoms1 ];
	complex* Psi = &data[0*dim];
	complex* Jm0 = &data[1*dim];
	complex* Jm1 = &data[2*dim];
	complex* Jnm0= &data[3*dim];
	complex* Jnm1= &data[4*dim];
		  mu.pmu = &data[5*dim];
	complex* JT;

	//OUTPUT VARIABLE
	srand(1521);

	//INITIALIZE ITERATION
	for( int r = 0 ; r < numRV ; r++) 
	{
		//DRAW A RANDOM VECTOR
		CreateRandomVector( dim, Jm0 );
		OPR.Multiply(1.0, Jm0, 0.0 , Psi ); // O|Psi>

		//CHEBYSHEV ITERATION
		NHAM.Multiply(1.0, Jm0, 0.0 , Jm1 ); 
		for( int m = 0 ; m < numMoms; m ++)
		{
			OPL.Multiply(1.0, Jm0, 0.0 , Jnm0 ); // O|Psi>
			NHAM.Multiply(1.0, Jnm0, 0.0 , Jnm1 );
			for( int n = 0 ; n < numMoms; n ++)
			{
				mu(m,n) += dot(dim ,Psi, Jnm0 );
				JT=Jnm0; Jnm0=Jnm1; Jnm1=JT;
				NHAM.Multiply(2.0, Jnm0, -1.0 , Jnm1 );   // J1 = 2*H*J0
			}
			JT=Jm0; Jm0=Jm1; Jm1=JT;
			NHAM.Multiply(2.0, Jm0, -1.0 , Jm1 );   // J1 = 2*H*J0
		}
	}


	std::ofstream outputfile( ("NonEqOp"+S_OPR+LABEL+"KPM_M"+sNumMom+"RV"+snumRV+".mom2D").c_str() );
	for( int m = numMoms0-1 ; m >= 0 ; m--)
	for( int n = numMoms1-1 ; n >= 0 ; n--)
	{
//		complex mu0 = 4.0/bandWidth/bandWidth*mu(m,n).real()*dim/numRV; 
		complex mu0 = mu(m,n).real()/dim/numRV; 
		outputfile<<m<<" "<<n<<" "<<mu0.real()<<" "<<mu0.imag()<<std::endl;
	}
	outputfile.close();
	
	outputfile.open( ("NonEqOp"+S_OPR+LABEL+"KPM_M"+sNumMom+"RV"+snumRV+".ETA_COND").c_str() );
	for( double eta = 0.1*nb; eta<=nb; eta+=0.1*nb )
	{
		double x = 0.01;
		double cond =0;
		for( int n = 0 ; n < numMoms ; n++)
		for( int m = 0 ; m < numMoms ; m++)
		{
			complex mu0 = 4.0/bandWidth/bandWidth*mu(m,n).real()*dim/numRV; 
			cond +=  1.0/M_PI*ChebWeigthL(m,x,eta).imag()*ChebWeigthR(n,x,eta).imag()*mu0.real(); 
		}
		outputfile<<eta<<" "<<cond<<" "<<std::endl;
	}
	outputfile.close();

	outputfile.open( ("NonEqOp"+S_OPR+LABEL+"KPM_M"+sNumMom+"RV"+snumRV+".COND").c_str() );
	double eta = nb;
	for( double x = -0.9; x<=0.9; x=x+0.01 )
	{
		double cond =0;
		for( int m = 0 ; m < numMoms ; m++)
		for( int n = 0 ; n < numMoms ; n++)
		{
			complex mu0 = 4.0/bandWidth/bandWidth*mu(m,n).real()*dim/numRV; 
			cond +=  1.0/M_PI*ChebWeigthL(m,x,eta).imag()*ChebWeigthR(n,x,eta).imag()*mu0.real(); 
		}

		outputfile<<x*bandWidth/2.0<<" "<<cond<<" "<<std::endl;
	}
	outputfile.close();
	

	const double dt   = 1.0, tmax = 100;// hbar set the time in fs
	outputfile.open( ("NonEqOp"+S_OPR+LABEL+"KPM_M"+sNumMom+"RV"+snumRV+".no_eta_TCOND").c_str() );
	std::cout<<"nnew"<<eta<<std::endl;
	for( double x = -0.9; x<=0.9; x=x+0.1 )
	{
		double cond =0;

		//delta sum
		for( int n = 0 ; n < numMoms ; n++)
		{
			//exp approximation
			for( int m = 0 ; m < numMoms ; m++)
			{
				//time integral
				const double br   = 0.0;		//broadening in eV;
				const double Ener = x*bandWidth/2.0;	//energy in eV;
				for( double t = dt ; t<=tmax; t+=dt )
				{
					double mu0 = 2.0/bandWidth*mu(m,n).real()*dim/numRV; 
					cond  +=  BesselKernel_Del(m,Ener,br,t,bandWidth/2.0) *dt*ChebWeigthR(n,x,eta).imag()*mu0; 
				}
			}

		}	
	
		outputfile<<x*bandWidth/2.0<<" "<<cond<<" "<<std::endl;
	}
	outputfile.close();


	outputfile.open( ("NonEqOp"+S_OPR+LABEL+"KPM_M"+sNumMom+"RV"+snumRV+".TCOND").c_str() );
	complex I = complex(0,1);
	std::cout<<"nnew"<<eta<<std::endl;
	for( double x = -0.9; x<=0.9; x=x+0.1 )
	{
		double cond =0;

		//delta sum
		for( int n = 0 ; n < numMoms ; n++)
		{
			//exp approximation
			for( int m = 0 ; m < numMoms ; m++)
			{
				//time integral
				const double br   = broadening;		//broadening in eV;
				const double Ener = x*bandWidth/2.0;	//energy in eV;
				for( double t = dt ; t<=tmax; t+=dt )
				{
					double mu0 = 2.0/bandWidth*mu(m,n).real()*dim/numRV; 
					cond  +=  BesselKernel_Del(m,Ener,br,t,bandWidth/2.0) *dt*ChebWeigthR(n,x,eta).imag()*mu0; 
				}
			}

		}	
	
		outputfile<<x*bandWidth/2.0<<" "<<cond<<" "<<std::endl;
	}
	outputfile.close();
		
	delete [] data;
	return 0;
	
}
